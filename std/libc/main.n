type cstr = anyptr

#linkid rt_string_ref
fn string.to_cstr():cstr

#linkid rt_string_new
fn cstr.to_string():string

// stdlib.h
#linkid atoi
fn atoi(cstr str):i32

#linkid atol
fn atol(cstr str):i64

#linkid atof
fn atof(cstr str):f64

#linkid strtof
fn strtof(cstr str, anyptr endptr):f32

#linkid strtod
fn strtod(cstr str, anyptr endptr):f64

#linkid strtol
fn strtol(cstr str, anyptr endptr, i32 base):i64

#linkid strtoul
fn strtoul(cstr str, anyptr endptr, i32 base):u64

#linkid rand
fn rand():i32

#linkid srand
fn srand(u32 seed):void

#linkid malloc
fn malloc(u64 size):anyptr

#linkid calloc
fn calloc(u64 nmemb, u64 size):anyptr

#linkid realloc
fn realloc(anyptr p, u64 size):anyptr

#linkid free
fn free(anyptr p):void

#linkid aligned_alloc
fn aligned_alloc(u64 alignment, u64 size):anyptr

#linkid abort
fn abort()

#linkid atexit
fn atexit(anyptr func):i32

#linkid exit
fn exit(i32 status)

#linkid _Exit
fn _exit(i32 status)

#linkid at_quick_exit
fn at_quick_exit(anyptr func):i32

#linkid quick_exit
fn quick_exit(i32 status)

#linkid getenv
fn getenv(cstr name):cstr

#linkid system
fn system(cstr command):i32

#linkid abs
fn abs(i32 x):i32

#linkid labs
fn labs(i64 x):i64

type div_t = struct {
    i32 quot
    i32 rem
}

type ldiv_t = struct {
    i64 quot
    i64 rem
}

#linkid div
fn div(i32 numer, i32 denom):div_t

#linkid ldiv
fn ldiv(i64 numer, i64 denom):ldiv_t

#linkid mblen
fn mblen(cstr s, u64 n):i32

#linkid mbtowc
fn mbtowc(anyptr pwc, cstr s, u64 n):i32

#linkid wctomb
fn wctomb(cstr s, i32 wc):i32

#linkid mbstowcs
fn mbstowcs(anyptr pwcs, cstr s, u64 n):u64

#linkid wcstombs
fn wcstombs(cstr s, anyptr pwcs, u64 n):u64

#linkid posix_memalign
fn posix_memalign(anyptr memptr, u64 alignment, u64 size):i32

#linkid setenv
fn setenv(cstr name, cstr value, i32 overwrite):i32

#linkid unsetenv
fn unsetenv(cstr name):i32

#linkid putenv
fn putenv(cstr str):i32

#linkid mkstemp
fn mkstemp(cstr template):i32

#linkid mkostemp
fn mkostemp(cstr template, i32 flags):i32

#linkid mkdtemp
fn mkdtemp(cstr template):cstr

#linkid mktemp
fn mktemp(cstr template):cstr

#linkid mkstemps
fn mkstemps(cstr template, i32 suffixlen):i32

#linkid mkostemps
fn mkostemps(cstr template, i32 suffixlen, i32 flags):i32

#linkid getsubopt
fn getsubopt(anyptr optionp, anyptr tokens, anyptr valuep):i32

#linkid rand_r
fn rand_r(rawptr<u32> seed):i32

#linkid realpath
fn realpath(cstr path, cstr resolved_path):cstr

#linkid random
fn random():i64

#linkid srandom
fn srandom(u32 seed):void

#linkid initstate
fn initstate(u32 seed, cstr state, u64 size):cstr

#linkid setstate
fn setstate(cstr state):cstr

#linkid posix_openpt
fn posix_openpt(i32 flags):i32

#linkid grantpt
fn grantpt(i32 fd):i32

#linkid unlockpt
fn unlockpt(i32 fd):i32

#linkid ptsname_r
fn ptsname_r(i32 fd, cstr buf, u64 buflen):i32

#linkid l64a
fn l64a(i64 value):cstr

#linkid a64l
fn a64l(cstr s):i64

#linkid setkey
fn setkey(cstr key):void

#linkid drand48
fn drand48():f64

#linkid erand48
fn erand48(anyptr xsubi):f64

#linkid lrand48
fn lrand48():i64

#linkid nrand48
fn nrand48(anyptr xsubi):i64

#linkid mrand48
fn mrand48():i64

#linkid jrand48
fn jrand48(anyptr xsubi):i64

#linkid srand48
fn srand48(i64 seedval):void

#linkid seed48
fn seed48(anyptr seed16v):rawptr<u16>

#linkid lcong48
fn lcong48(anyptr param):void

#linkid valloc
fn valloc(u64 size):anyptr

#linkid memalign
fn memalign(u64 alignment, u64 size):anyptr

#linkid reallocarray
fn reallocarray(anyptr p, u64 nmemb, u64 size):anyptr

#linkid getloadavg
fn getloadavg(rawptr<f64> loadavg, i32 nelem):i32

#linkid ecvt
fn ecvt(f64 number, i32 ndigits, rawptr<i32> decpt, rawptr<i32> sign):cstr

#linkid fcvt
fn fcvt(f64 number, i32 ndigits, rawptr<i32> decpt, rawptr<i32> sign):cstr

#linkid gcvt
fn gcvt(f64 number, i32 ndigit, cstr buf):cstr

#linkid secure_getenv
fn secure_getenv(cstr name):cstr


// stdio.h
type fileptr = anyptr

// stdio.h constants
const EOF = -1
const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const _IOFBF = 0
const _IOLBF = 1
const _IONBF = 2
const BUFSIZ = 1024
const FILENAME_MAX = 4096
const FOPEN_MAX = 1000
const TMP_MAX = 10000
const L_tmpnam = 20
const L_ctermid = 20
const L_cuserid = 20

// fpos_t type
type fpos_t = struct {
    [u8;16] __opaque
    i64 __lldata
    f64 __align
}

#linkid fopen
fn fopen(cstr filename, cstr mode):fileptr

#linkid freopen
fn freopen(cstr filename, cstr mode, fileptr stream):fileptr

#linkid fclose
fn fclose(fileptr stream):i32

#linkid remove
fn remove(cstr filename):i32

#linkid rename
fn rename(cstr old_name, cstr new_name):i32

#linkid feof
fn feof(fileptr stream):i32

#linkid ferror
fn ferror(fileptr stream):i32

#linkid fflush
fn fflush(fileptr stream):i32

#linkid clearerr
fn clearerr(fileptr stream):void

#linkid fseek
fn fseek(fileptr stream, i64 offset, i32 whence):i32

#linkid ftell
fn ftell(fileptr stream):i64

#linkid rewind
fn rewind(fileptr stream):void

#linkid fgetpos
fn fgetpos(fileptr stream, rawptr<fpos_t> pos):i32

#linkid fsetpos
fn fsetpos(fileptr stream, rawptr<fpos_t> pos):i32

#linkid fread
fn fread(anyptr p, u64 size, u64 nmemb, fileptr stream):u64

#linkid fwrite
fn fwrite(anyptr p, u64 size, u64 nmemb, fileptr stream):u64

#linkid fgetc
fn fgetc(fileptr stream):i32

#linkid getc
fn getc(fileptr stream):i32

#linkid getchar
fn getchar():i32

#linkid ungetc
fn ungetc(i32 c, fileptr stream):i32

#linkid fputc
fn fputc(i32 c, fileptr stream):i32

#linkid putc
fn putc(i32 c, fileptr stream):i32

#linkid putchar
fn putchar(i32 c):i32

#linkid fgets
fn fgets(cstr s, i32 size, fileptr stream):cstr

#linkid fputs
fn fputs(cstr s, fileptr stream):i32

#linkid puts
fn puts(cstr s):i32

// Error handling
#linkid perror
fn perror(cstr s):void

// Buffer control
#linkid setvbuf
fn setvbuf(fileptr stream, cstr buffer, i32 mode, u64 size):i32

#linkid setbuf
fn setbuf(fileptr stream, cstr buffer):void

// Temporary files
#linkid tmpnam
fn tmpnam(cstr s):cstr

#linkid tmpfile
fn tmpfile():fileptr


// POSIX extensions
#linkid fmemopen
fn fmemopen(anyptr buffer, u64 size, cstr mode):fileptr

#linkid open_memstream
fn open_memstream(rawptr<cstr> bufp, rawptr<u64> sizep):fileptr

#linkid fdopen
fn fdopen(i32 fd, cstr mode):fileptr

#linkid popen
fn popen(cstr command, cstr t):fileptr

#linkid pclose
fn pclose(fileptr stream):i32

#linkid fileno
fn fileno(fileptr stream):i32

#linkid fseeko
fn fseeko(fileptr stream, i64 offset, i32 whence):i32

#linkid ftello
fn ftello(fileptr stream):i64

// File locking
#linkid flockfile
fn flockfile(fileptr stream):void

#linkid ftrylockfile
fn ftrylockfile(fileptr stream):i32

#linkid funlockfile
fn funlockfile(fileptr stream):void

// Unlocked I/O
#linkid getc_unlocked
fn getc_unlocked(fileptr stream):i32

#linkid getchar_unlocked
fn getchar_unlocked():i32

#linkid putc_unlocked
fn putc_unlocked(i32 c, fileptr stream):i32

#linkid putchar_unlocked
fn putchar_unlocked(i32 c):i32

#linkid fgetc_unlocked
fn fgetc_unlocked(fileptr stream):i32

#linkid fputc_unlocked
fn fputc_unlocked(i32 c, fileptr stream):i32

#linkid fflush_unlocked
fn fflush_unlocked(fileptr stream):i32

#linkid fread_unlocked
fn fread_unlocked(anyptr p, u64 size, u64 nmemb, fileptr stream):u64

#linkid fwrite_unlocked
fn fwrite_unlocked(anyptr p, u64 size, u64 nmemb, fileptr stream):u64

#linkid clearerr_unlocked
fn clearerr_unlocked(fileptr stream):void

#linkid feof_unlocked
fn feof_unlocked(fileptr stream):i32

#linkid ferror_unlocked
fn ferror_unlocked(fileptr stream):i32

#linkid fileno_unlocked
fn fileno_unlocked(fileptr stream):i32

#linkid fgets_unlocked
fn fgets_unlocked(cstr s, i32 size, fileptr stream):cstr

#linkid fputs_unlocked
fn fputs_unlocked(cstr s, fileptr stream):i32

// Line-oriented I/O
#linkid getdelim
fn getdelim(rawptr<cstr> lineptr, rawptr<u64> n, i32 delim, fileptr stream):i64

#linkid getline
fn getline(rawptr<cstr> lineptr, rawptr<u64> n, fileptr stream):i64

// Additional functions
#linkid renameat
fn renameat(i32 olddirfd, cstr oldpath, i32 newdirfd, cstr newpath):i32

#linkid ctermid
fn ctermid(cstr s):cstr

#linkid tempnam
fn tempnam(cstr dir, cstr pfx):cstr

#linkid cuserid
fn cuserid(cstr s):cstr

#linkid setlinebuf
fn setlinebuf(fileptr stream):void

#linkid setbuffer
fn setbuffer(fileptr stream, cstr buffer, u64 size):void

#linkid getw
fn getw(fileptr stream):i32

#linkid putw
fn putw(i32 w, fileptr stream):i32

#linkid fgetln
fn fgetln(fileptr stream, rawptr<u64> len):cstr

// Cookie I/O function types
type cookie_read_function_t = fn(anyptr, cstr, u64):i64
type cookie_write_function_t = fn(anyptr, cstr, u64):i64
type cookie_seek_function_t = fn(anyptr, rawptr<i64>, i32):i32
type cookie_close_function_t = fn(anyptr):i32

type cookie_io_functions_t = struct {
    cookie_read_function_t read
    cookie_write_function_t write
    cookie_seek_function_t seek
    cookie_close_function_t close
}

#linkid fopencookie
fn fopencookie(anyptr cookie, cstr mode, cookie_io_functions_t io_funcs):fileptr





// TODO
#linkid std_args
fn std_args():[string]

#linkid htons
fn htons(u16 host):u16

/*
 * Protections are chosen from these bits, or-ed together
 */
int PROT_NONE = 0x00    /* [MC2] no permissions */
int PROT_READ = 0x01    /* [MC2] pages can be read */
int PROT_WRITE = 0x02    /* [MC2] pages can be written */
int PROT_EXEC = 0x04    /* [MC2] pages can be executed */

int MAP_ANON = 0x1000
int MAP_COPY = 0x2
int MAP_FILE = 0x0
int MAP_FIXED = 0x10
int MAP_HASSEMAPHORE = 0x200
int MAP_JIT = 0x800
int MAP_NOCACHE = 0x400
int MAP_NOEXTEND = 0x100
int MAP_NORESERVE = 0x40
int MAP_PRIVATE = 0x2
int MAP_RENAME = 0x20

/* ISO C `broken-down time' structure.  */
type tm_t = struct {
    i32 tm_sec
    i32 tm_min
    i32 tm_hour
    i32 tm_mday
    i32 tm_mon
    i32 tm_year
    i32 tm_wday
    i32 tm_yday
    i32 tm_isdst
    i64 tm_gmtoff
    anyptr tm_zone
}

// 标准库函数, 返回值是静态值，不用处理 gc 但是线程不安全
#linkid localtime
fn localtime(rawptr<i64> timestamp):rawptr<tm_t>

// 将 time_info_t 转换为时间戳
#linkid mktime
fn mktime(rawptr<tm_t> time_info):i64

// strftime(buf.ref(), buf.len(), '%Y-%m-%d %H:%M:%S', &tp)
#linkid strftime
fn strftime(anyptr s, i64 size, anyptr format, rawptr<tm_t> time_info):i64

// 通过空值 options 实现阻塞和非阻塞模式
#linkid waitpid
fn waitpid(int pid, rawptr<int> status, int options):int

// --- signal 相关 <sys/signalfd.h> 和 <signal.h>
type sigset_t = struct {
    [u64;16] __val
}

type signalfd_siginfo_t = struct {
    u32 ssi_signo
    i32 ssi_errno
    i32 ssi_code
    u32 ssi_pid
    u32 ssi_uid
    i32 ssi_fd
    u32 ssi_tid
    u32 ssi_band
    u32 ssi_overrun
    u32 ssi_trapno
    i32 ssi_status
    i32 ssi_int
    u64 ssi_ptr
    u64 ssi_utime
    u64 ssi_stime
    u64 ssi_addr
    u16 ssi_addr_lsb
    u32 __pad2
    i32 ssi_syscall
    u64 ssi_call_addr
    u32 ssi_arch
    [u8;48] __pad
}

#linkid sigemptyset
fn sigemptyset(ptr<sigset_t> sigset):i32

#linkid sigaddset
fn sigaddset(ptr<sigset_t> sigset, i32 signo):i32

#linkid sigfillset
fn sigfillset(ptr<sigset_t> sigset):i32

#linkid sigprocmask
fn sigprocmask(i32 how, ptr<sigset_t> sigset, rawptr<sigset_t> oldset):i32

#linkid signalfd
fn signalfd(int fd, ptr<sigset_t> mask, i32 flags):i32

#linkid sleep
fn sleep(int second)

#linkid usleep
fn usleep(u32 usec):i32

#linkid prctl
fn prctl(int option, u64 arg2, u64 arg3, u64 arg4, u64 arg5):int

#linkid clock
fn clock():int

#linkid uv_hrtime
fn uv_hrtime():u64

// 读取当前全局的 errno 编码
#linkid rt_errno
fn errno():int

#linkid rt_get_envs
fn get_envs():[string]

#linkid rt_strerror
fn strerror():string


#linkid fork
fn fork():int

#linkid getcwd
fn getcwd(cstr path, uint size):cstr

#linkid strlen
fn strlen(cstr str):uint

#linkid strstr
fn strstr(cstr haystack, cstr needle):cstr

#linkid strrstr
fn strrstr(cstr haystack, cstr needle):cstr

#linkid memmove
fn memmove(anyptr dst, anyptr src, int len)

#linkid memcpy
fn memcpy(anyptr dst, anyptr src, int len)

#linkid memset
fn memset(anyptr dst, int c, int len)

#linkid mmap
fn mmap(anyptr addr, int len, int prot, int flags, int fd, int off):anyptr

#linkid munmap
fn munmap(anyptr addr, int len)

#linkid fabs
fn fabs(f64 x):f64

#linkid fabsf
fn fabsf(f32 x):f32

#linkid round
fn round(f64 x):f64

#linkid roundf
fn roundf(f32 x):f32

#linkid cosf
fn cosf(f32 x):f32

#linkid sinf
fn sinf(f32 x):f32

#linkid sqrtf
fn sqrtf(f32 x):f32

#linkid isprint
fn isprint(u8 c):bool

#linkid isspace
fn isspace(u8 c):bool

#linkid powf
fn powf(f32 x, f32 y):f32

#linkid expf
fn expf(f32 x):f32